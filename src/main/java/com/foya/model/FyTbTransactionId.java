package com.foya.model;

import java.io.*;

/**
 * Application identity class for: com.foya.model.FyTbTransaction
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class FyTbTransactionId implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("com.foya.model.FyTbTransaction"); }
		catch(Exception e) {}
	}

	public String fileType;
	public String filename;
	public long transactionSeq;

	public FyTbTransactionId() {
	}

	public FyTbTransactionId(String str) {
		fromString(str);
	}

	public String getFileType() {
		return fileType;
	}

	public void setFileType(String fileType) {
		this.fileType = fileType;
	}

	public String getFilename() {
		return filename;
	}

	public void setFilename(String filename) {
		this.filename = filename;
	}

	public long getTransactionSeq() {
		return transactionSeq;
	}

	public void setTransactionSeq(long transactionSeq) {
		this.transactionSeq = transactionSeq;
	}

	public String toString() {
		return fileType
			+ "::" + filename
			+ "::" + String.valueOf(transactionSeq);
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((fileType == null) ? 0 : fileType.hashCode());
		rs = rs * 37 + ((filename == null) ? 0 : filename.hashCode());
		rs = rs * 37 + (int) (transactionSeq ^ (transactionSeq >>> 32));
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		FyTbTransactionId other = (FyTbTransactionId) obj;
		return ((fileType == null && other.fileType == null)
			|| (fileType != null && fileType.equals(other.fileType)))
			&& ((filename == null && other.filename == null)
			|| (filename != null && filename.equals(other.filename)))
			&& (transactionSeq == other.transactionSeq);
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			fileType = null;
		else
			fileType = str;
		str = toke.nextToken();
		if("null".equals(str))
			filename = null;
		else
			filename = str;
		str = toke.nextToken();
		transactionSeq = Long.parseLong(str);
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}