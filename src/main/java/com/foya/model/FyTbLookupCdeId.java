package com.foya.model;

import java.io.*;

/**
 * Application identity class for: com.foya.model.FyTbLookupCde
 *
 * Auto-generated by:
 * org.apache.openjpa.enhance.ApplicationIdTool
 */
public class FyTbLookupCdeId implements Serializable {
	static {
		// register persistent class in JVM
		try { Class.forName("com.foya.model.FyTbLookupCde"); }
		catch(Exception e) {}
	}

	public String lookupCde;
	public String lookupType;

	public FyTbLookupCdeId() {
	}

	public FyTbLookupCdeId(String str) {
		fromString(str);
	}

	public String getLookupCde() {
		return lookupCde;
	}

	public void setLookupCde(String lookupCde) {
		this.lookupCde = lookupCde;
	}

	public String getLookupType() {
		return lookupType;
	}

	public void setLookupType(String lookupType) {
		this.lookupType = lookupType;
	}

	public String toString() {
		return lookupCde
			+ "::" + lookupType;
	}

	public int hashCode() {
		int rs = 17;
		rs = rs * 37 + ((lookupCde == null) ? 0 : lookupCde.hashCode());
		rs = rs * 37 + ((lookupType == null) ? 0 : lookupType.hashCode());
		return rs;
	}

	public boolean equals(Object obj) {
		if(this == obj)
			return true;
		if(obj == null || obj.getClass() != getClass())
			return false;

		FyTbLookupCdeId other = (FyTbLookupCdeId) obj;
		return ((lookupCde == null && other.lookupCde == null)
			|| (lookupCde != null && lookupCde.equals(other.lookupCde)))
			&& ((lookupType == null && other.lookupType == null)
			|| (lookupType != null && lookupType.equals(other.lookupType)));
	}

	private void fromString(String str) {
		Tokenizer toke = new Tokenizer(str);
		str = toke.nextToken();
		if("null".equals(str))
			lookupCde = null;
		else
			lookupCde = str;
		str = toke.nextToken();
		if("null".equals(str))
			lookupType = null;
		else
			lookupType = str;
	}

	protected static class Tokenizer {
		private final String str;
		private int last;

		public Tokenizer (String str) {
			this.str = str;
		}

		public String nextToken () {
			int next = str.indexOf("::", last);
			String part;
			if(next == -1) {
				part = str.substring(last);
				last = str.length();
			} else {
				part = str.substring(last, next);
				last = next + 2;
			}
			return part;
		}
	}
}